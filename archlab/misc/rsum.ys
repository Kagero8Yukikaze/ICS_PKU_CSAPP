# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Array of some elements
.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0
#end

main:	
    irmovq ele1,%rdi
    xorq %r8,%r8        # set %r8=0
	call rsum_list		
	ret

# long rsum_list(list_ptr ls)
rsum_list:
    pushq %r8           # save %r8
    xorq %rax,%rax      # set val=0
    andq %rdi,%rdi      # return if %rdi==0
    je exit
    mrmovq (%rdi),%r8       # %r8=ls->val
    mrmovq 8(%rdi),%rdi     # ls=ls->next
    call rsum_list
    addq %r8,%rax
exit:
    popq %r8            # end recursive
    ret



# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
